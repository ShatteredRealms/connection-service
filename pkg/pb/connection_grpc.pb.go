// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: sro/gameserver/connection.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ConnectionService_ConnectGameServer_FullMethodName    = "/sro.gameserver.ConnectionService/ConnectGameServer"
	ConnectionService_VerifyConnectRequest_FullMethodName = "/sro.gameserver.ConnectionService/VerifyConnectRequest"
	ConnectionService_IsPlaying_FullMethodName            = "/sro.gameserver.ConnectionService/IsPlaying"
)

// ConnectionServiceClient is the client API for ConnectionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConnectionServiceClient interface {
	ConnectGameServer(ctx context.Context, in *CharacterTarget, opts ...grpc.CallOption) (*ConnectGameServerResponse, error)
	VerifyConnectRequest(ctx context.Context, in *VerifyConnectRequestMessage, opts ...grpc.CallOption) (*CharacterTarget, error)
	IsPlaying(ctx context.Context, in *CharacterTarget, opts ...grpc.CallOption) (*ConnectionStatus, error)
}

type connectionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConnectionServiceClient(cc grpc.ClientConnInterface) ConnectionServiceClient {
	return &connectionServiceClient{cc}
}

func (c *connectionServiceClient) ConnectGameServer(ctx context.Context, in *CharacterTarget, opts ...grpc.CallOption) (*ConnectGameServerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConnectGameServerResponse)
	err := c.cc.Invoke(ctx, ConnectionService_ConnectGameServer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectionServiceClient) VerifyConnectRequest(ctx context.Context, in *VerifyConnectRequestMessage, opts ...grpc.CallOption) (*CharacterTarget, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CharacterTarget)
	err := c.cc.Invoke(ctx, ConnectionService_VerifyConnectRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectionServiceClient) IsPlaying(ctx context.Context, in *CharacterTarget, opts ...grpc.CallOption) (*ConnectionStatus, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConnectionStatus)
	err := c.cc.Invoke(ctx, ConnectionService_IsPlaying_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConnectionServiceServer is the server API for ConnectionService service.
// All implementations must embed UnimplementedConnectionServiceServer
// for forward compatibility.
type ConnectionServiceServer interface {
	ConnectGameServer(context.Context, *CharacterTarget) (*ConnectGameServerResponse, error)
	VerifyConnectRequest(context.Context, *VerifyConnectRequestMessage) (*CharacterTarget, error)
	IsPlaying(context.Context, *CharacterTarget) (*ConnectionStatus, error)
	mustEmbedUnimplementedConnectionServiceServer()
}

// UnimplementedConnectionServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedConnectionServiceServer struct{}

func (UnimplementedConnectionServiceServer) ConnectGameServer(context.Context, *CharacterTarget) (*ConnectGameServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConnectGameServer not implemented")
}
func (UnimplementedConnectionServiceServer) VerifyConnectRequest(context.Context, *VerifyConnectRequestMessage) (*CharacterTarget, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyConnectRequest not implemented")
}
func (UnimplementedConnectionServiceServer) IsPlaying(context.Context, *CharacterTarget) (*ConnectionStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsPlaying not implemented")
}
func (UnimplementedConnectionServiceServer) mustEmbedUnimplementedConnectionServiceServer() {}
func (UnimplementedConnectionServiceServer) testEmbeddedByValue()                           {}

// UnsafeConnectionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConnectionServiceServer will
// result in compilation errors.
type UnsafeConnectionServiceServer interface {
	mustEmbedUnimplementedConnectionServiceServer()
}

func RegisterConnectionServiceServer(s grpc.ServiceRegistrar, srv ConnectionServiceServer) {
	// If the following call pancis, it indicates UnimplementedConnectionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ConnectionService_ServiceDesc, srv)
}

func _ConnectionService_ConnectGameServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CharacterTarget)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionServiceServer).ConnectGameServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectionService_ConnectGameServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionServiceServer).ConnectGameServer(ctx, req.(*CharacterTarget))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectionService_VerifyConnectRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyConnectRequestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionServiceServer).VerifyConnectRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectionService_VerifyConnectRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionServiceServer).VerifyConnectRequest(ctx, req.(*VerifyConnectRequestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectionService_IsPlaying_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CharacterTarget)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionServiceServer).IsPlaying(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectionService_IsPlaying_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionServiceServer).IsPlaying(ctx, req.(*CharacterTarget))
	}
	return interceptor(ctx, in, info, handler)
}

// ConnectionService_ServiceDesc is the grpc.ServiceDesc for ConnectionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConnectionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sro.gameserver.ConnectionService",
	HandlerType: (*ConnectionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ConnectGameServer",
			Handler:    _ConnectionService_ConnectGameServer_Handler,
		},
		{
			MethodName: "VerifyConnectRequest",
			Handler:    _ConnectionService_VerifyConnectRequest_Handler,
		},
		{
			MethodName: "IsPlaying",
			Handler:    _ConnectionService_IsPlaying_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sro/gameserver/connection.proto",
}
